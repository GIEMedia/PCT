@using System.Reflection
@using System.Web.Http.Description
@using System.Collections.ObjectModel
@using Prototype1.Foundation
@model Collection<ApiDescription>

@{
    ViewBag.Title = "GIE PCT API Documentation";

    // Group APIs by controller
    var apiGroups = Model.ToLookup(api => api.ActionDescriptor.ControllerDescriptor);

    var types =
        ((from m in Model
            let type = m.ResponseDescription.ResponseType ?? m.ResponseDescription.DeclaredType
            where m.ResponseDescription != null && type != null
            select type.IsArray ? type.GetElementType() : type)
            .Union(
                from m in Model
                from p in m.ParameterDescriptions
                where p.ParameterDescriptor != null && p.ParameterDescriptor.ParameterType != null
                select p.ParameterDescriptor.ParameterType.IsArray ? p.ParameterDescriptor.ParameterType.GetElementType() : p.ParameterDescriptor.ParameterType))
            .Where(x => x != null && !x.IsPrimitive && ((x.IsClass && !x.Namespace.IfNullOrEmpty("").StartsWith("System")) || (x.IsGenericType && !x.GetGenericArguments()[0].Namespace.IfNullOrEmpty("").StartsWith("System"))))
            .Distinct()
            .ToList();

    foreach (var gen in types.Where(t => t.IsGenericType).ToArray())
    {
        types.Remove(gen);
        types.Add(gen.GetGenericArguments()[0]);
    }

    foreach (var abs in types.Where(t => t.IsAbstract).ToArray())
    {
        types.Remove(abs);
        types.AddRange(Assembly.GetAssembly(abs).GetTypes().Where(myType => myType.IsClass && !myType.IsAbstract && myType.IsSubclassOf(abs)));
    }

    types = types.OrderBy(x => x.Name).Distinct().ToList();
}

<script>
	$(document).ready(function () {
		$('#toc').toc({
			'selectors': 'h2,h3,h4',
			'container': '#contents'
		});
	});
</script>

<header>
	<h1>@ViewBag.Title</h1>
</header>

<div id="body">

	<section id="tableOfContents">
		<h2>Table of Contents</h2>
		<div id="toc"></div>
	</section>
	
	<div id="contents">
		<section class="definition introduction">
		    <h2>Introduction</h2>
		    <div class="area controller">
		        <h3>Security</h3>
		        <p>All requests must be performed using SSL via the HTTPS protocol.</p>
		        <p>All requests require an Api-Key header containing the unique key provided by PST.</p>
		        <p>Any endpoints that access user specific information will require an Authorization header bearing the oauth access token, obtained from a successful login request.</p>
		        <div class="action-methods">
                    <div class="action-method area">
                        <h4 class="summary">Authentication</h4>
                        <p class="remarks">Content-Type on the request MUST be application/x-www-form-urlencoded</p>
                        <p class="uri"><code>POST /account/login</code></p>
                        <div class="codeSample">
                            <p class="api-section-subheader">Request Parameters</p>
                            <table>
                                <thead>
                                    <tr><td>Name</td><td>Description</td><td>Additional information</td></tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <td>grant_type</td>
                                        <td>The oauth grant type</td>
                                        <td>Required. Always use "password"</td>
                                    </tr>
                                    <tr>
                                        <td>username</td>
                                        <td>The username for the account</td>
                                        <td>Required</td>
                                    </tr>
                                    <tr>
                                        <td>password</td>
                                        <td>The password for the account</td>
                                        <td>Required</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                        <div class="codeSample">
                            <p class="api-section-subheader">Request Body</p>
                            <div class="code ui-tabbed">
                                <div class="ui-tabbed-header">
                                    <span class="sample-header ui-tab">application/x-www-form-urlencoded</span>
                                </div>
                                <pre><code>grant_type=password&username=user123&password=password123</code></pre>
                            </div>
                        </div>
                        <div class="codeSample">
                            <p class="api-section-subheader">Response Body</p>
                            <div class="code ui-tabbed">
                                <div class="ui-tabbed-header">
                                    <span class="sample-header ui-tab">application/json, text/json</span>
                                </div>
                                <pre><code>{
    "access_token":"boQtj0SCGz2GFGz[...]",
    "token_type":"bearer",
    "expires_in":1209599,
    "userName":"user123",
    ".issued":"Mon, 14 Oct 2013 06:53:32 GMT",
    ".expires":"Mon, 28 Oct 2013 06:53:32 GMT"
}</code></pre>
                            </div>
                        </div>
                    </div>
		        </div>
            </div>
            <div class="area controller">
                <h3>Versioning</h3>
                <p>Each version of the API will get a new set of endpoints that will be accessible through a distinct set of URIs.</p>
            </div>
            <div class="area controller">
                <h3>Headers</h3>
                <table>
                    <thead>
                        <tr>
                            <td>Header</td>
                            <td>Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>Api-Key</td>
                            <td>Identifies and authroizes the client to make calls against the API endpoints</td>
                        </tr>
                        <tr>
                            <td>Authorization</td>
                            <td>Authenticate the current user for the API call. Required for all protected API endpoints.</td>
                        </tr>
                        <tr>
                            <td>Accept</td>
                            <td>Specify the desired response format [optional [application/json]]</td>
                        </tr>
                        <tr>
                            <td>Content-Type</td>
                            <td>Specify the format of the data payload [optional [application/json]]</td>
                        </tr>
                        <tr>
                            <td>Accept-Language</td>
                            <td>Specify the desired language and locale information [optional [en-US]]</td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <div class="area controller">
                <h3>Status Codes</h3>
                <p>The API employs standard HTTP status codes to indicate the general success or failure of the call to the API server.</p>
                <p>When the error is the result of the POST of invalid data, a response will be provided detailing the reason for failure, in the following format:</p>
                <p>
<pre><code>{ 
   "Message": "The request is invalid.", 
   "ModelState": { 
       "some_model_property": [ 
           "some_model_property not valid because..."
       ], 
       "some_model_property2": [ 
           "some_model_property2 not valid because...",
           "some_model_property2 not valid because of this too..." 
       ] 
   } 
}</code></pre>
                </p>
            </div>
        </section>

		<section class="definition classDiagrams">
			<h2>Diagrams</h2>
            <div class="area controller">
                <h3>Class Diagrams</h3>
                <ul>
                    @if (Directory.Exists(Server.MapPath("~/Areas/HelpPage/images/ClassDiagrams/")))
                    {
                        foreach (var file in new DirectoryInfo(Server.MapPath("~/Areas/HelpPage/images/ClassDiagrams/")).GetFiles())
                        {
                            <li><a target="_blank" href="@Url.Content("~/Areas/HelpPage/images/ClassDiagrams/" + file.Name)">@file.Name.TrimEnd(file.Extension).TrimEnd('.')</a></li>
                        }
                    }
                    @if (!Directory.Exists(Server.MapPath("~/Areas/HelpPage/images/ClassDiagrams/")) || new DirectoryInfo(Server.MapPath("~/Areas/HelpPage/images/ClassDiagrams/")).GetFiles().Length == 0)
                    {
                    <i>No class diagrams currently available.</i>
                    }
                </ul>
            </div>
            <div class="area controller">
                <h3>Sequence Diagrams</h3>
                <ul>
                    @if (Directory.Exists(Server.MapPath("~/Areas/HelpPage/images/SequenceDiagrams/")))
                    {
                        foreach (var file in new DirectoryInfo(Server.MapPath("~/Areas/HelpPage/images/SequenceDiagrams/")).GetFiles())
                        {
                            <li><a target="_blank" href="@Url.Content("~/Areas/HelpPage/images/SequenceDiagrams/" + file.Name)">@file.Name.TrimEnd(file.Extension).TrimEnd('.')</a></li>
                        }
                    }
                    @if (!Directory.Exists(Server.MapPath("~/Areas/HelpPage/images/SequenceDiagrams/")) || new DirectoryInfo(Server.MapPath("~/Areas/HelpPage/images/SequenceDiagrams/")).GetFiles().Length == 0)
                    {
                        <i>No sequence diagrams currently available.</i>
                    }
                </ul>
            </div>
		</section>

	    <section class="definition">
	        <h2>Endpoints</h2>
	        @foreach (var group in apiGroups.OrderBy(x => x.Key.ControllerName))
	        {
	            @Html.DisplayFor(m => group, "ApiGroup")
	        }
	    </section>

	    <section class="definition">
            <h2>Request / Response JSON Objects</h2>
	        <div class="area controller">
	            @foreach (var t in types)
	            {
	                @Html.DisplayFor(m => t, "Type")
	            }
	        </div>
	    </section>
	</div>
</div>