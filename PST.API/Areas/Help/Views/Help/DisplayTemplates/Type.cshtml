@using System.Reflection
@using System.Runtime.Serialization
@using Prototype1.Foundation
@model Type

@{
    var properties = Model.GetProperties(BindingFlags.Public | BindingFlags.Instance)
        .Where(x => !x.GetCustomAttributes(typeof (IgnoreDataMemberAttribute), false).Any());
    var typeName = Model.Name;
    if (Model.IsGenericType)
    {
        typeName = typeName.Replace("`1", "") + "<" + Model.GetGenericArguments()[0].Name + ">";
    }

    var aName = "type_" + typeName.Replace(" ", "");
}

<div class="action-method area">
    <a name="@aName"></a>
    <h4 class="summary">@typeName</h4>
    <table>
        <thead>
            <tr>
                <td width="25%">Property</td>
                <td width="25%">Type</td>
                <td width="50%">Additional information</td>
            </tr>
        </thead>
        <tbody>
            @foreach (var prop in properties)
            {
                var propType = prop.PropertyType.IsArray ? prop.PropertyType.GetElementType() : prop.PropertyType;

                var propTypeName =
                    (!propType.IsGenericType ? propType.Name : propType.Name.Replace("`1", "") + "<" + propType.GenericTypeArguments[0].Name + ">")
                    + (prop.PropertyType.IsArray ? "[]" : "");

                var aLinkName =
                    (!propType.IsPrimitive && propType.IsClass && !(propType.Namespace ?? "").StartsWith("System"))
                        ? "type_" + propTypeName.Replace(" ", "").Replace("[", "").Replace("]", "")
                        : "";

                <tr>
                    <td><b>@prop.Name</b></td>
                    <td>
                        @if (aLinkName.IsNullOrEmpty())
                        {
                            @propTypeName
                        }
                        else
                        {
                            <a href="#@aLinkName">@propTypeName</a>
                        }

                        @if (propType.IsEnum)
                        {
                            <i>(Enum)</i>
                        }
                    </td>
                    <td>
                        @if (propType.IsEnum)
                        {
                            var first = true;
                            foreach (var n in Enum.GetNames(propType))
                            {
                                if (!first)
                                {
                                    <br />
                                }
                                @MvcHtmlString.Create(n + " = " + (int)Enum.Parse(propType, n));
                                                                                                        first = false;
                            }
                        }
                    </td>
                </tr>
            }
        </tbody>




    </table>
</div>